[{"text": "in this section we're going to look at", "start": 2.929, "duration": 4.961}, {"text": "the built-in data structures in Python", "start": 5.609, "duration": 4.2}, {"text": "which are extremely important when", "start": 7.89, "duration": 4.32}, {"text": "building real applications first we're", "start": 9.809, "duration": 4.111}, {"text": "going to look at lists and then we'll", "start": 12.21, "duration": 5.04}, {"text": "look at tuples sets and dictionaries so", "start": 13.92, "duration": 4.859}, {"text": "earlier you have seen that we can use", "start": 17.25, "duration": 4.56}, {"text": "square brackets to define a list or a", "start": 18.779, "duration": 5.731}, {"text": "sequence of objects in between these", "start": 21.81, "duration": 4.889}, {"text": "brackets we can have objects of any type", "start": 24.51, "duration": 4.83}, {"text": "so we can have a list of strings like", "start": 26.699, "duration": 5.07}, {"text": "this and then assign it to a variable", "start": 29.34, "duration": 6.69}, {"text": "like letters we can also have a list of", "start": 31.769, "duration": 7.2}, {"text": "numbers boolean or even a list of lists", "start": 36.03, "duration": 5.79}, {"text": "let me show you so here we have a list", "start": 38.969, "duration": 5.641}, {"text": "each item in this list will be a list", "start": 41.82, "duration": 6.39}, {"text": "itself so here's the first item which is", "start": 44.61, "duration": 6.629}, {"text": "a list of two items now let's add", "start": 48.21, "duration": 5.91}, {"text": "another item to our main or parent list", "start": 51.239, "duration": 6.57}, {"text": "this item is also a list with two items", "start": 54.12, "duration": 7.59}, {"text": "so now we have a matrix which is a two", "start": 57.809, "duration": 6.721}, {"text": "dimensional list now let me show you", "start": 61.71, "duration": 4.89}, {"text": "some cool tricks let's say you want to", "start": 64.53, "duration": 5.19}, {"text": "have a list of a hundred zeros you don't", "start": 66.6, "duration": 4.83}, {"text": "want to manually create that like this", "start": 69.72, "duration": 3.54}, {"text": "that's very ugly let me show you a", "start": 71.43, "duration": 4.71}, {"text": "better way so we define a list of one", "start": 73.26, "duration": 5.85}, {"text": "item on 0 and then we can multiply it by", "start": 76.14, "duration": 7.5}, {"text": "100 and the result will be this let me", "start": 79.11, "duration": 10.619}, {"text": "show you friend zeros here it is there", "start": 83.64, "duration": 9.72}, {"text": "you go so using a star or an asterisk we", "start": 89.729, "duration": 5.82}, {"text": "can repeat the items in a list now", "start": 93.36, "duration": 4.71}, {"text": "similarly we can use a plus to", "start": 95.549, "duration": 4.86}, {"text": "concatenate multiple lists let me show", "start": 98.07, "duration": 6.29}, {"text": "you so first I'm gonna change this to 5", "start": 100.409, "duration": 7.14}, {"text": "now let's define a variable combined", "start": 104.36, "duration": 7.74}, {"text": "which is our zeros list plus letters", "start": 107.549, "duration": 8.121}, {"text": "let's see what happens print combined", "start": 112.1, "duration": 7.42}, {"text": "you know it so we have 5 zeros followed", "start": 115.67, "duration": 7.839}, {"text": "by ABC as you can see in Python every", "start": 119.52, "duration": 5.55}, {"text": "object in a list can be of a different", "start": 123.509, "duration": 3.691}, {"text": "type so they don't have to be exactly", "start": 125.07, "duration": 4.499}, {"text": "the same type we can combine a list of", "start": 127.2, "duration": 4.92}, {"text": "numbers with strings and boolean or even", "start": 129.569, "duration": 3.601}, {"text": "lists", "start": 132.12, "duration": 3.449}, {"text": "now let's say you want to have a list of", "start": 133.17, "duration": 5.13}, {"text": "numbers like 0 1 2 3 all the way up to", "start": 135.569, "duration": 4.801}, {"text": "20 you don't want to type all of these", "start": 138.3, "duration": 4.8}, {"text": "by hand there is a better way so we have", "start": 140.37, "duration": 5.64}, {"text": "this list function as you can see this", "start": 143.1, "duration": 4.74}, {"text": "function takes an iterable", "start": 146.01, "duration": 4.29}, {"text": "so we can pass any iterable here and", "start": 147.84, "duration": 5.07}, {"text": "convert it to a list earlier you learn", "start": 150.3, "duration": 4.95}, {"text": "about the range function this function", "start": 152.91, "duration": 5.46}, {"text": "returns a range object which is iterable", "start": 155.25, "duration": 5.459}, {"text": "which means we can iterate or loop over", "start": 158.37, "duration": 4.8}, {"text": "it so here we can call this function and", "start": 160.709, "duration": 6.061}, {"text": "pass 20 and with this we can create a", "start": 163.17, "duration": 6.48}, {"text": "list of numbers from 0 to 20 let me show", "start": 166.77, "duration": 6.12}, {"text": "you so let's store it in numbers and", "start": 169.65, "duration": 7.65}, {"text": "then print it on the terminal there you", "start": 172.89, "duration": 8.04}, {"text": "go so 0 up to 20 but note that 20 itself", "start": 177.3, "duration": 7.35}, {"text": "is not included as another example let's", "start": 180.93, "duration": 7.97}, {"text": "call the list function and pass a string", "start": 184.65, "duration": 6.72}, {"text": "earlier I told you that strings are also", "start": 188.9, "duration": 4.96}, {"text": "a turrible we can loop over them so we", "start": 191.37, "duration": 5.0}, {"text": "can pass them to the list function and", "start": 193.86, "duration": 7.349}, {"text": "see what we get let's print chars on the", "start": 196.37, "duration": 7.72}, {"text": "terminal so you can see each character", "start": 201.209, "duration": 6.75}, {"text": "in our original string is an item in", "start": 204.09, "duration": 6.63}, {"text": "this list so these are a few different", "start": 207.959, "duration": 5.581}, {"text": "ways to create a list in Python now that", "start": 210.72, "duration": 4.59}, {"text": "we have a list we can get the number of", "start": 213.54, "duration": 3.9}, {"text": "items in that list using the Len", "start": 215.31, "duration": 5.67}, {"text": "function so here we can print the Len or", "start": 217.44, "duration": 7.26}, {"text": "length of chars let's take a look so we", "start": 220.98, "duration": 7.259}, {"text": "have 11 items in this list over the next", "start": 224.7, "duration": 4.95}, {"text": "few lectures we'll look at various", "start": 228.239, "duration": 5.121}, {"text": "operations around lists", "start": 229.65, "duration": 3.71}, {"text": "so here we have a list of four items we", "start": 238.81, "duration": 5.56}, {"text": "can use square brackets to access", "start": 242.09, "duration": 5.13}, {"text": "individual items in this list so let's", "start": 244.37, "duration": 6.3}, {"text": "print letters of zero this will return", "start": 247.22, "duration": 6.78}, {"text": "the first item in this list so when we", "start": 250.67, "duration": 6.629}, {"text": "run this program we'll get a now similar", "start": 254.0, "duration": 6.389}, {"text": "to strings if we pass a negative index", "start": 257.299, "duration": 6.09}, {"text": "here like negative one this will return", "start": 260.389, "duration": 6.03}, {"text": "the first item from the end of the list", "start": 263.389, "duration": 7.681}, {"text": "so when you run this we'll get D using", "start": 266.419, "duration": 7.351}, {"text": "square brackets we can also modify items", "start": 271.07, "duration": 6.21}, {"text": "in the list so let's change the first", "start": 273.77, "duration": 7.02}, {"text": "item to a capital A and then print the", "start": 277.28, "duration": 7.53}, {"text": "entire list there you go so this is the", "start": 280.79, "duration": 6.48}, {"text": "basic of accessing individual elements", "start": 284.81, "duration": 3.6}, {"text": "in the list", "start": 287.27, "duration": 3.27}, {"text": "the earlier in the course you learn that", "start": 288.41, "duration": 4.74}, {"text": "we can use two indexes to slice a string", "start": 290.54, "duration": 5.91}, {"text": "we have the exact same concept here so", "start": 293.15, "duration": 7.17}, {"text": "we add square brackets first index colon", "start": 296.45, "duration": 7.589}, {"text": "second index and this will return a new", "start": 300.32, "duration": 6.45}, {"text": "list with the first three items in our", "start": 304.039, "duration": 5.6}, {"text": "original list so if we print our", "start": 306.77, "duration": 5.919}, {"text": "original list", "start": 309.639, "duration": 5.84}, {"text": "you can see that it's not changed now", "start": 312.689, "duration": 4.83}, {"text": "just like strings if you don't specify", "start": 315.479, "duration": 5.07}, {"text": "the first argument 0 will be assumed by", "start": 317.519, "duration": 5.4}, {"text": "default so as you can see these two", "start": 320.549, "duration": 4.2}, {"text": "expressions produce the exact same", "start": 322.919, "duration": 5.1}, {"text": "result similarly if you don't include", "start": 324.749, "duration": 7.05}, {"text": "the end index by default the lengths of", "start": 328.019, "duration": 6.27}, {"text": "the list will be used here so this", "start": 331.799, "duration": 4.95}, {"text": "expression will return a new list with", "start": 334.289, "duration": 5.51}, {"text": "all the items in the original list and", "start": 336.749, "duration": 6.361}, {"text": "similarly we can also exclude the start", "start": 339.799, "duration": 5.62}, {"text": "index here and with this syntax we can", "start": 343.11, "duration": 5.759}, {"text": "get a copy of our original list there", "start": 345.419, "duration": 4.17}, {"text": "you go", "start": 348.869, "duration": 3.33}, {"text": "now when slicing a string we can also", "start": 349.589, "duration": 6.09}, {"text": "pass a step and this is useful in", "start": 352.199, "duration": 5.31}, {"text": "situations where you want to return", "start": 355.679, "duration": 4.47}, {"text": "every second or every third element in", "start": 357.509, "duration": 5.58}, {"text": "the original list so now when we run", "start": 360.149, "duration": 7.56}, {"text": "this code we'll get a and C so B will be", "start": 363.089, "duration": 7.41}, {"text": "a skipped let me show you using a better", "start": 367.709, "duration": 5.34}, {"text": "example so I'm going to delete", "start": 370.499, "duration": 5.49}, {"text": "everything here create a new list called", "start": 373.049, "duration": 5.19}, {"text": "numbers here we're gonna use the list", "start": 375.989, "duration": 7.23}, {"text": "function and pass range of 20 let's", "start": 378.239, "duration": 10.17}, {"text": "print our list so we get numbers 0 to 19", "start": 383.219, "duration": 8.34}, {"text": "okay now let's see what happens when we", "start": 388.409, "duration": 6.0}, {"text": "add square brackets here with two colons", "start": 391.559, "duration": 6.63}, {"text": "and two this will return every other", "start": 394.409, "duration": 6.891}, {"text": "element in the original list take a look", "start": 398.189, "duration": 7.29}, {"text": "so we get all the even numbers 0 2 4 and", "start": 401.3, "duration": 6.819}, {"text": "so on it's pretty cool isn't it here's", "start": 405.479, "duration": 5.25}, {"text": "another cool thing you can do here let's", "start": 408.119, "duration": 7.32}, {"text": "change the step to negative 1 as you can", "start": 410.729, "duration": 6.9}, {"text": "see this will return all the items in", "start": 415.439, "duration": 5.361}, {"text": "the original list but in reverse order", "start": 417.629, "duration": 5.61}, {"text": "so these are some useful things you can", "start": 420.8, "duration": 4.629}, {"text": "do with lists next we'll look at", "start": 423.239, "duration": 5.45}, {"text": "unpacking lists", "start": 425.429, "duration": 3.26}, {"text": "there are times that you may want to get", "start": 433.62, "duration": 4.48}, {"text": "individual items in a list and assign", "start": 436.09, "duration": 4.56}, {"text": "them to different variables here is an", "start": 438.1, "duration": 4.56}, {"text": "example we can define a variable like", "start": 440.65, "duration": 4.73}, {"text": "first and set it to numbers of zero", "start": 442.66, "duration": 6.15}, {"text": "similarly we can define second set it to", "start": 445.38, "duration": 6.19}, {"text": "numbers of one and third set it to", "start": 448.81, "duration": 5.88}, {"text": "numbers of two perhaps we are going to", "start": 451.57, "duration": 5.49}, {"text": "use these variables in a few complex", "start": 454.69, "duration": 4.74}, {"text": "expressions in your code now there is a", "start": 457.06, "duration": 5.04}, {"text": "cleaner and more elegant way to achieve", "start": 459.43, "duration": 5.73}, {"text": "the same result and that is what we call", "start": 462.1, "duration": 6.99}, {"text": "list unpacking so we can unpack this", "start": 465.16, "duration": 6.9}, {"text": "list into multiple variables let me show", "start": 469.09, "duration": 5.43}, {"text": "you how that works so we define our", "start": 472.06, "duration": 5.61}, {"text": "variables like first second and third", "start": 474.52, "duration": 7.08}, {"text": "and then set them to our list what we", "start": 477.67, "duration": 7.38}, {"text": "have on line two is exactly identical to", "start": 481.6, "duration": 6.06}, {"text": "what we have on lines four to six this", "start": 485.05, "duration": 6.03}, {"text": "is what we call list unpacking now what", "start": 487.66, "duration": 5.64}, {"text": "is important here is that the number of", "start": 491.08, "duration": 4.26}, {"text": "variables that we have on the left side", "start": 493.3, "duration": 4.08}, {"text": "of the assignment operator should be", "start": 495.34, "duration": 4.38}, {"text": "equal to the number of items we have in", "start": 497.38, "duration": 6.27}, {"text": "the list so if we exclude third here and", "start": 499.72, "duration": 5.39}, {"text": "run this program", "start": 503.65, "duration": 5.58}, {"text": "we will get an error value error too", "start": 505.11, "duration": 6.85}, {"text": "many values to unpack so there are too", "start": 509.23, "duration": 5.22}, {"text": "many items in this list and we cannot", "start": 511.96, "duration": 7.47}, {"text": "unpack it into enough variables now what", "start": 514.45, "duration": 7.08}, {"text": "if in this list we have so many items", "start": 519.43, "duration": 5.7}, {"text": "but we only care about the first two we", "start": 521.53, "duration": 5.49}, {"text": "don't want to define so many variables", "start": 525.13, "duration": 3.57}, {"text": "on the left side of the assignment", "start": 527.02, "duration": 4.8}, {"text": "operator well we can get the first and", "start": 528.7, "duration": 7.32}, {"text": "second and then pack the rest inside of", "start": 531.82, "duration": 7.68}, {"text": "a separate list called other with this", "start": 536.02, "duration": 6.48}, {"text": "syntax we'll get the first and second", "start": 539.5, "duration": 5.49}, {"text": "items and everything else will be stored", "start": 542.5, "duration": 4.98}, {"text": "in a separate list called other let me", "start": 544.99, "duration": 5.58}, {"text": "show you so let's print first and let's", "start": 547.48, "duration": 6.6}, {"text": "also print other now we don't need these", "start": 550.57, "duration": 6.96}, {"text": "few lines here let's run this code so", "start": 554.08, "duration": 8.13}, {"text": "first is one and other is a list of all", "start": 557.53, "duration": 6.54}, {"text": "the items after", "start": 562.21, "duration": 4.56}, {"text": "the second item that is the list I'm", "start": 564.07, "duration": 5.55}, {"text": "talking about so in this example we have", "start": 566.77, "duration": 6.66}, {"text": "both unpacking and packing first we try", "start": 569.62, "duration": 6.99}, {"text": "to unpack this numbers list into the", "start": 573.43, "duration": 5.04}, {"text": "variables on the left side of the", "start": 576.61, "duration": 4.17}, {"text": "assignment operator and then because we", "start": 578.47, "duration": 4.41}, {"text": "have used an asterisk here we're", "start": 580.78, "duration": 5.15}, {"text": "basically packing all the other items", "start": 582.88, "duration": 6.21}, {"text": "into a separate list now to refresh your", "start": 585.93, "duration": 3.7}, {"text": "memory", "start": 589.09, "duration": 3.54}, {"text": "earlier we use this syntax when defining", "start": 589.63, "duration": 5.19}, {"text": "a function with a variable number of", "start": 592.63, "duration": 4.68}, {"text": "arguments remember we had a function", "start": 594.82, "duration": 6.39}, {"text": "like this multiplied with a parameter", "start": 597.31, "duration": 7.47}, {"text": "called asterisk numbers and then we", "start": 601.21, "duration": 7.17}, {"text": "could call this multiplied with", "start": 604.78, "duration": 6.66}, {"text": "arbitrary number of arguments so when we", "start": 608.38, "duration": 5.75}, {"text": "prefix a parameter with an asterisk", "start": 611.44, "duration": 5.22}, {"text": "Python will get all these arbitrary", "start": 614.13, "duration": 5.68}, {"text": "arguments and pack them into a list this", "start": 616.66, "duration": 5.93}, {"text": "is exactly what is happening on line two", "start": 619.81, "duration": 7.47}, {"text": "now let me delete this other stuff now", "start": 622.59, "duration": 6.34}, {"text": "let's change this example a little bit", "start": 627.28, "duration": 4.23}, {"text": "what if we care only about the first and", "start": 628.93, "duration": 6.54}, {"text": "the last item well we can put other in", "start": 631.51, "duration": 6.96}, {"text": "between so we get the first other and", "start": 635.47, "duration": 6.63}, {"text": "then the last item so let's change the", "start": 638.47, "duration": 9.08}, {"text": "last item to nine and then print first", "start": 642.1, "duration": 10.44}, {"text": "last and other this is what we get so", "start": 647.55, "duration": 7.6}, {"text": "first there's one last is nine and the", "start": 652.54, "duration": 5.73}, {"text": "rest is here so this is all about list", "start": 655.15, "duration": 5.96}, {"text": "unpacking", "start": 658.27, "duration": 2.84}, {"text": "in this lecture I'm gonna show you how", "start": 665.29, "duration": 5.5}, {"text": "to loop over lists so here we have a", "start": 668.39, "duration": 5.1}, {"text": "list of three items we can use our four", "start": 670.79, "duration": 6.0}, {"text": "loops to loop over this list so for", "start": 673.49, "duration": 8.339}, {"text": "letter in letters : and then we print", "start": 676.79, "duration": 8.58}, {"text": "each letter save the changes and run the", "start": 681.829, "duration": 6.841}, {"text": "code we get ABC now what if you want to", "start": 685.37, "duration": 6.33}, {"text": "get the index of each item as well well", "start": 688.67, "duration": 4.76}, {"text": "we have a built-in function called", "start": 691.7, "duration": 6.27}, {"text": "enumerate we call it here and this will", "start": 693.43, "duration": 7.029}, {"text": "return an enumerator object which is", "start": 697.97, "duration": 5.25}, {"text": "iterable in each iteration this", "start": 700.459, "duration": 5.581}, {"text": "enumerate object will give us a tapa let", "start": 703.22, "duration": 5.57}, {"text": "me show you so now when we run this code", "start": 706.04, "duration": 5.7}, {"text": "look in each iteration we're getting a", "start": 708.79, "duration": 5.5}, {"text": "topple so a topple as I told you before", "start": 711.74, "duration": 5.13}, {"text": "is like your list but it's read-only we", "start": 714.29, "duration": 5.549}, {"text": "cannot add new items to it so in each", "start": 716.87, "duration": 5.52}, {"text": "iteration we're getting a topple of two", "start": 719.839, "duration": 4.891}, {"text": "items the first item in this topple is", "start": 722.39, "duration": 5.73}, {"text": "the index and the second item is the", "start": 724.73, "duration": 6.15}, {"text": "item at that index so now to get the", "start": 728.12, "duration": 5.279}, {"text": "index we can use square brackets to", "start": 730.88, "duration": 5.699}, {"text": "access the first item in this topple so", "start": 733.399, "duration": 7.921}, {"text": "if we print letter of 0 we will get the", "start": 736.579, "duration": 7.38}, {"text": "indexes and right next to that we can", "start": 741.32, "duration": 7.019}, {"text": "add letter a 1 so we will see the item", "start": 743.959, "duration": 7.681}, {"text": "at a given index but this syntax is a", "start": 748.339, "duration": 5.37}, {"text": "little bit ugly in the last lecture", "start": 751.64, "duration": 5.34}, {"text": "you'll learn about list unpacking so if", "start": 753.709, "duration": 9.181}, {"text": "we have a list with two items 0 and a we", "start": 756.98, "duration": 8.82}, {"text": "can unpack it into two variables like", "start": 762.89, "duration": 7.8}, {"text": "this index comma letter equals items so", "start": 765.8, "duration": 8.37}, {"text": "here we are unpacking the items list now", "start": 770.69, "duration": 5.839}, {"text": "what if we change square brackets to", "start": 774.17, "duration": 5.279}, {"text": "parentheses now we have a table all and", "start": 776.529, "duration": 6.461}, {"text": "we can still unpack this topple so you", "start": 779.449, "duration": 6.121}, {"text": "saw that this enumerate function returns", "start": 782.99, "duration": 5.73}, {"text": "an enumerate object which is iterable in", "start": 785.57, "duration": 6.06}, {"text": "each iteration this enumerate object", "start": 788.72, "duration": 5.94}, {"text": "will return a tuple that looks like this", "start": 791.63, "duration": 4.69}, {"text": "so we can unpack", "start": 794.66, "duration": 5.62}, {"text": "kid right here so we add another", "start": 796.32, "duration": 7.08}, {"text": "variable index now with this we no", "start": 800.28, "duration": 5.31}, {"text": "longer have to use square brackets and", "start": 803.4, "duration": 5.48}, {"text": "we can simply print index and letter", "start": 805.59, "duration": 7.38}, {"text": "let's run this code there you go so now", "start": 808.88, "duration": 6.78}, {"text": "we don't need this anymore", "start": 812.97, "duration": 6.42}, {"text": "so to recap you can use four loops to", "start": 815.66, "duration": 6.61}, {"text": "iterate over lists if you also need the", "start": 819.39, "duration": 4.8}, {"text": "index you should call the enumerate", "start": 822.27, "duration": 4.47}, {"text": "function this will return an enumerate", "start": 824.19, "duration": 5.16}, {"text": "object which is iterable in each", "start": 826.74, "duration": 5.76}, {"text": "iteration it will return a tuple and you", "start": 829.35, "duration": 7.25}, {"text": "can unpack that topple right here", "start": 832.5, "duration": 4.1}, {"text": "in this lecture I'm going to show you", "start": 841.48, "duration": 4.93}, {"text": "how to add new items to a list or remove", "start": 843.56, "duration": 5.76}, {"text": "existing items so for adding items you", "start": 846.41, "duration": 5.67}, {"text": "have two options depending on where you", "start": 849.32, "duration": 4.95}, {"text": "want to add this new item if you want to", "start": 852.08, "duration": 4.35}, {"text": "add an item at the end of the list you", "start": 854.27, "duration": 5.67}, {"text": "should use the append method so earlier", "start": 856.43, "duration": 5.25}, {"text": "you learned that everything in Python is", "start": 859.94, "duration": 3.93}, {"text": "an object so we can use the dot notation", "start": 861.68, "duration": 5.61}, {"text": "to access individual functions or more", "start": 863.87, "duration": 6.36}, {"text": "accurately methods in that object so", "start": 867.29, "duration": 5.01}, {"text": "when a function is part of an object we", "start": 870.23, "duration": 4.53}, {"text": "refer to that function as a method so", "start": 872.3, "duration": 4.68}, {"text": "here are all the methods available on", "start": 874.76, "duration": 5.34}, {"text": "list objects we use the append method to", "start": 876.98, "duration": 5.91}, {"text": "add something at the end of this list", "start": 880.1, "duration": 6.98}, {"text": "let's print our letters and we will get", "start": 882.89, "duration": 7.71}, {"text": "ABCD beautiful now if you want to add an", "start": 887.08, "duration": 6.1}, {"text": "item at a specific position you should", "start": 890.6, "duration": 5.76}, {"text": "use the insert method so letters that", "start": 893.18, "duration": 6.66}, {"text": "insert we can add something at the", "start": 896.36, "duration": 6.72}, {"text": "beginning of the list so index 0 let's", "start": 899.84, "duration": 6.99}, {"text": "add a hyphen and then print the result", "start": 903.08, "duration": 7.38}, {"text": "so this is what we get now for removing", "start": 906.83, "duration": 5.88}, {"text": "objects again you have a few different", "start": 910.46, "duration": 4.8}, {"text": "options if you want to remove the item", "start": 912.71, "duration": 4.41}, {"text": "at the end of the list you should use", "start": 915.26, "duration": 5.04}, {"text": "the pop method so here recall letters", "start": 917.12, "duration": 6.66}, {"text": "dot pop this will remove the letter D at", "start": 920.3, "duration": 4.74}, {"text": "the end of our list", "start": 923.78, "duration": 6.33}, {"text": "so now let's print our letters as you", "start": 925.04, "duration": 7.8}, {"text": "can see D is gone we can also pass on", "start": 930.11, "duration": 4.92}, {"text": "index here to remove the item at the", "start": 932.84, "duration": 6.57}, {"text": "given index so if you pass 0 instead of", "start": 935.03, "duration": 7.11}, {"text": "D this - will be removed let's take a", "start": 939.41, "duration": 5.88}, {"text": "look we run this so the hyphen is gone", "start": 942.14, "duration": 6.51}, {"text": "and we get ABCD beautiful now there are", "start": 945.29, "duration": 4.68}, {"text": "times that you want to remove an object", "start": 948.65, "duration": 4.05}, {"text": "but you don't know its index if that's", "start": 949.97, "duration": 5.55}, {"text": "the case we can use the remove method so", "start": 952.7, "duration": 7.11}, {"text": "letters that remove here we can remove B", "start": 955.52, "duration": 6.39}, {"text": "and this will remove the first", "start": 959.81, "duration": 4.56}, {"text": "occurrence of the letter B so if you", "start": 961.91, "duration": 4.41}, {"text": "have multiple B's only the first one", "start": 964.37, "duration": 3.66}, {"text": "will be removed if you want to remove", "start": 966.32, "duration": 4.08}, {"text": "all B's in this list you'll have to loop", "start": 968.03, "duration": 3.909}, {"text": "over this list and we", "start": 970.4, "duration": 4.269}, {"text": "of each be individually now let's run", "start": 971.939, "duration": 5.22}, {"text": "this code one more time so you can see B", "start": 974.669, "duration": 5.34}, {"text": "is gone we have another way to remove an", "start": 977.159, "duration": 5.01}, {"text": "item from a list and that is using the", "start": 980.009, "duration": 5.13}, {"text": "Dell or delete statement so here we can", "start": 982.169, "duration": 6.66}, {"text": "delete an item by its index we can also", "start": 985.139, "duration": 6.66}, {"text": "delete a range of items so this is the", "start": 988.829, "duration": 5.16}, {"text": "difference between the delete statement", "start": 991.799, "duration": 5.04}, {"text": "and the pop method the pop method will", "start": 993.989, "duration": 5.76}, {"text": "remove only one item by index whereas", "start": 996.839, "duration": 4.77}, {"text": "with the delete statement we can remove", "start": 999.749, "duration": 4.95}, {"text": "a range of items and finally if you want", "start": 1001.609, "duration": 4.83}, {"text": "to remove all the objects in the list", "start": 1004.699, "duration": 5.55}, {"text": "you should use the clear method next", "start": 1006.439, "duration": 7.88}, {"text": "we'll look at finding objects in a list", "start": 1010.249, "duration": 4.07}, {"text": "there are times that you want to find", "start": 1019.13, "duration": 5.62}, {"text": "the index of a given object in a list so", "start": 1021.36, "duration": 5.61}, {"text": "let's say we want to find the index of", "start": 1024.75, "duration": 5.22}, {"text": "letter A in our letters list we call", "start": 1026.97, "duration": 7.68}, {"text": "letters dot index and pass a let's print", "start": 1029.97, "duration": 9.75}, {"text": "the result so this will return 0 what if", "start": 1034.65, "duration": 7.41}, {"text": "you try to get the index of an object", "start": 1039.72, "duration": 6.18}, {"text": "that doesn't exist here like D we get a", "start": 1042.06, "duration": 7.38}, {"text": "value error D is not in the list this", "start": 1045.9, "duration": 5.61}, {"text": "behavior is different from a lot of", "start": 1049.44, "duration": 4.41}, {"text": "programming languages out there C based", "start": 1051.51, "duration": 4.98}, {"text": "languages return negative 1 if you try", "start": 1053.85, "duration": 4.59}, {"text": "to get the index of an object that", "start": 1056.49, "duration": 4.41}, {"text": "doesn't exist in the list but in Python", "start": 1058.44, "duration": 5.58}, {"text": "we get an error so to prevent this error", "start": 1060.9, "duration": 4.98}, {"text": "from happening first you should check to", "start": 1064.02, "duration": 4.38}, {"text": "see if the given object exists in the", "start": 1065.88, "duration": 5.19}, {"text": "list and for that we use the in operator", "start": 1068.4, "duration": 8.33}, {"text": "so if D is in letters then we will print", "start": 1071.07, "duration": 9.66}, {"text": "its index so now we run the program and", "start": 1076.73, "duration": 6.43}, {"text": "we don't get any errors we also have", "start": 1080.73, "duration": 4.05}, {"text": "another method that you might find", "start": 1083.16, "duration": 4.47}, {"text": "useful in certain situations and that is", "start": 1084.78, "duration": 6.6}, {"text": "count so letters that count this will", "start": 1087.63, "duration": 6.3}, {"text": "return the number of occurrences of the", "start": 1091.38, "duration": 5.52}, {"text": "given item in this list so when we print", "start": 1093.93, "duration": 7.79}, {"text": "the result we'll get 0", "start": 1096.9, "duration": 4.82}, {"text": "hi guys thank you for watching this", "start": 1103.33, "duration": 4.65}, {"text": "tutorial my name is Mohamad ani and I", "start": 1105.639, "duration": 4.201}, {"text": "have tons of tutorials like this for you", "start": 1107.98, "duration": 3.84}, {"text": "on my channel so be sure to subscribe", "start": 1109.84, "duration": 4.439}, {"text": "and also please like and share this", "start": 1111.82, "duration": 4.169}, {"text": "video if you want to learn Python", "start": 1114.279, "duration": 4.411}, {"text": "properly from scratch with depth I have", "start": 1115.989, "duration": 4.89}, {"text": "a comprehensive python tutorial for you", "start": 1118.69, "duration": 4.17}, {"text": "the link is below this video so click", "start": 1120.879, "duration": 3.481}, {"text": "the link to get started", "start": 1122.86, "duration": 5.33}, {"text": "thank you and have a fantastic day", "start": 1124.36, "duration": 3.83}]